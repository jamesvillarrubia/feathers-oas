paths:
  /ducks:
    get:
      tags:
        - ducks
      summary: Returns duck based on query parameters
      operationId: getDucks
      description: By including the appropriate query string parameters, search &
        return relevant ducks records.
      responses:
        "200":
          $ref: "#/components/responses/Duck_FJS_Array"
        "400":
          description: bad input parameter
        default:
          description: default response if no query string parameters are sent
          content:
            application/json:
              schema:
                $ref: ./errors.yml#/components/schemas/Error
    post:
      tags:
        - ducks
      summary: adds a new duck
      operationId: postDuck
      description: Creates a new duck
      requestBody:
        content:
          application/json:
            schema:
              oneOf:
                - $ref: "#/components/schemas/Duck"
                - type: array
                  items:
                    $ref: "#/components/schemas/Duck"
      responses:
        "201":
          description: Duck created.
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: "#/components/schemas/Duck"
                  - type: array
                    items:
                      $ref: "#/components/schemas/Duck"
              examples:
                "${names}_post_default":
                  $ref: "#/components/examples/ducks_post_default"
                "${names}_post_array":
                  $ref: "#/components/examples/ducks_post_array"
        "400":
          description: invalid input, object invalid
          content:
            application/json:
              schema:
                $ref: ./errors.yml#/components/schemas/Error
        "409":
          description: that duck already exists
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: ./errors.yml#/components/schemas/Error
  "/ducks/{duckId}":
    get:
      tags:
        - ducks
      summary: Returns duck based id
      operationId: getDuck
      description: By including the id, get a single duck
      parameters:
        - in: path
          name: duckId
          description: the id of a specific duck
          required: true
          schema:
            $ref: ./shared.yml#/components/schemas/IntegerId
      responses:
        "200":
          description: includes the results matching query string criteria
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Duck"
              examples:
                ducks_id_default:
                  $ref: "#/components/examples/ducks_id_default"
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: ./errors.yml#/components/schemas/Error
    delete:
      tags:
        - ducks
      summary: soft deletes multiple ducks
      operationId: deleteDucks
      parameters:
        - in: path
          name: duckId
          description: the id of a specific duck
          required: true
          schema:
            $ref: ./shared.yml#/components/schemas/IntegerId
      responses:
        "405":
          description: multiple deletes not allowed
          content:
            application/json:
              schema:
                type: object
              examples:
                ducks_delete:
                  $ref: "#/components/examples/ducks_id_delete_default"
    patch:
      tags:
        - ducks
      summary: patches a subset of fields on a duck
      operationId: patchDuck
      description: Patches a duck by field
      parameters:
        - in: path
          name: duckId
          description: the id of a specific duck
          schema:
            $ref: ./shared.yml#/components/schemas/IntegerId
          required: true
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Duck"
      responses:
        "200":
          description: duck patched
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Duck"
              examples:
                ducks_id_patch_default:
                  $ref: "#/components/examples/ducks_id_patch_default"
        "400":
          description: invalid input, object invalid
          content:
            application/json:
              schema:
                $ref: ./errors.yml#/components/schemas/Error
components:
  responses:
    Duck_FJS_Array:
      description: includes the results matching query string criteria
      content:
        application/json:
          schema:
            type: object
            required:
              - total
              - limit
              - skip
              - data
            properties:
              total:
                type: integer
              limit:
                type: integer
              skip:
                type: integer
              data:
                type: array
                items:
                  $ref: "#/components/schemas/Duck"
          examples:
            ducks_default:
              $ref: "#/components/examples/ducks_default"
            ducks_zero:
              $ref: "#/components/examples/ducks_zero"
  schemas:
    Duck:
      type: object
      required: []
      properties:
        id:
          type: number
        text:
          type: string
  examples:
    ducks_zero:
      value:
        total: 0
        limit: 10
        skip: 0
        data: []
    ducks_default:
      value:
        total: 2
        limit: 10
        skip: 0
        data: []
    ducks_post_default:
      value: {}
    ducks_post_array:
      value: []
    ducks_id_default:
      $ref: "#/components/examples/ducks_post_default"
    ducks_id_patch_default:
      value: {}
    ducks_id_put_default:
      value: {}
    ducks_id_delete_default:
      value: {}
